name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-amd64
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-i386
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            name: windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      

      - name: Install dependencies (linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          if [ "${{ matrix.target }}" = "i686-unknown-linux-gnu" ]; then
            sudo dpkg --add-architecture i386
            sudo apt-get update
            sudo apt-get install -y gcc-multilib libsqlite3-dev:i386
          else
            sudo apt-get install -y libsqlite3-dev
          fi

      - name: Install dependencies (macos)
        if: runner.os == 'macOS'
        run: brew install sqlite

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cargo build --release --target ${{ matrix.target }} --features bundle-sqlite
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        env:
          CARGO_TERM_COLOR: always

      - name: Package binary
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            zip ../../../release-${{ matrix.name }}.zip watching_record.exe
          else
            tar -czf ../../../release-${{ matrix.name }}.tar.gz watching_record
          fi
          cd ../../..
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.name }}
          path: release-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-linux-amd64/release-linux-amd64.tar.gz
          asset_name: release-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-linux-i386/release-linux-i386.tar.gz
          asset_name: release-linux-i386.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-macos/release-macos.tar.gz
          asset_name: release-macos.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/release-windows/release-windows.zip
          asset_name: release-windows.zip
          asset_content_type: application/zip